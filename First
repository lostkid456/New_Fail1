#Johnathan Zhao
#Dynamical Systems

import math 

#Method to find the ratio between initial/current
def FindRatio(m1):
    m_1=[]
    for item in m1:
        m_1.append(float(item))
    val=m_1[0]/m_1[1]
    return val

#Method for matrix multiplication 
def Multiplication(m1,m2):
    M=[]
    m_1=[]
    for item in m1:
        m_1.append(float(item))
    for i in range(len(m2[0])):
        value=0;
        for j in range(len(m1)):
            value+=((m_1[j])*m2[i][j])
        M.append(value)
    return M

#Method for matrix subtraction
def Subtraction(m1,m2):
    m_1=[]
    m_2=[]
    for item in m1:
        m_1.append(float(item))
    for item in m2:
        m_2.append(float(item))
    val=m_1[0]-m_2[0]
    return math.fabs(val)

#Method for finding the state at a certain inputed time
def FindAtCertainTime(initial,time):
    count=0
    for i in range(time):
        current = initial                                  #A temporary variable for the current initial state
        
        current = Multiplication(current,mat)                     #Then set that temporary variable to the vector state after matrix multiplication
        
        print("The ratio between the current and inital steady state is,"+ str(FindRatio(initial)/FindRatio(current)))  #Prints the ratio between the temp vector state and initial state
        
        count+=1  #Adds one to the counter or iteration we are on 
        
        initial=current    #Then sets initial to the current for recursion
        
        print("The state after"+ " " + str(count) + "  "+ "iterations is" + " "+ str(initial))
        
#Finds the steady state(if any)
def FindSteadyState(initial,tolerance):
    count=0             #Used to keep track of what iteration will be steady state
    counter=0            #Will be used for later purposes 
    for i in range(100):
        current=initial                     #temporary variable for new steady state
        current=Multiplication(current,mat)
        val=Subtraction(initial,current)    # finds the difference between the initial steady state and new steady state
        if(val<=tolerance):             #Program stops and prints out where the steady state is at time if steady state is found 
            print("There is a steady state after" + " "+ str(count) + " " + "iterations with a tolerance of"+ " " + str(tolerance) )
            counter+=1
            break
        else:
            count+=1
            initial=current    
    if(counter==0):                       #Counter being zero means there is no steady state 
        print("There is no steady state.")
        if(math.fabs(FindRatio(initial)-FindRatio(current))<tolerance):  #Finds if the ratio converges or not if there is no steady state 
            print("Their ratios converge to," + " "+ FindRatio(current))   
        

print("This program will TRY to solve dynamical systems. \n ")

n=int(input("What n by n system do you want to work with? \n" )) #Input a single integer for n to represent 
                                                                                                       #What n by n system  you want to work with

coeff=input("Input the coefficents for the"+ " " +str(n)+" "+"by"+ " "+ str(n)+ " " +"system. \n").replace(" ","").split(',') #Input coefficents 

mat=[] #Initialize new matrix 

for i in range(n):                                 #Creates new matrix based on coefficents inputed 
    colList=[]
    for j in range(n):
        colList.append(float(coeff[n*i+j]))
    mat.append(colList)

initial= input("Input values for the initial vector state for the system.").replace(" ", "").split(',') #Initial vector state

time= int(input("How many interations do you want to do?"))  #Iterations of the system you want to find for 

tolerance=0.0000000001 #Tolerance for the difference between the originial state and then next state

FindAtCertainTime(initial,time)#Calls function to find the state at time 

FindSteadyState(initial,tolerance) #Calls function to find the steady state 

    
    
    
